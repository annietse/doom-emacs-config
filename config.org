#+title: Config
#+author: Atri Hegde
#+description: TODO

* Preface

** Screenshots

[[./org.png]]
[[./note-taking.png]]

* Table of Contents :TOC:
- [[#preface][Preface]]
  - [[#screenshots][Screenshots]]
- [[#packages-required][Packages required]]
  - [[#golang][GoLang]]
- [[#user-interface][User Interface]]
  - [[#name-and-email][Name and email]]
  - [[#line-numbers][Line Numbers]]
  - [[#scroll-off][Scroll off]]
  - [[#font][Font]]
  - [[#theme][Theme]]
  - [[#doom-modeline][Doom modeline]]
  - [[#keybinds][Keybinds]]
  - [[#evil-mode][Evil mode]]
- [[#org-mode][Org mode]]
  - [[#general][General]]
  - [[#fonts-in-org][Fonts in Org]]
  - [[#latex-snippets][Latex snippets]]
  - [[#org-roam][Org Roam]]
  - [[#writeroom][Writeroom]]
  - [[#org-roam-ui][Org roam ui]]
- [[#general-1][General]]
- [[#keymaps][Keymaps]]
- [[#lsp][LSP]]
- [[#llm][LLM]]

* Packages required

#+begin_src bash :tangle no
paru -S hunspell hunspell-en_gb wordnet-cli sqlite ripgrep texlive-core texlive-bin texlive-science texlive-latexextra gnuplot
#+end_src

** GoLang

#+begin_src bash :tangle no
go install github.com/x-motemen/gore/cmd/gore@latest
go install github.com/stamblerre/gocode@latest
go install golang.org/x/tools/cmd/godoc@latest
go install golang.org/x/tools/cmd/goimports@latest
go install golang.org/x/tools/cmd/gorename@latest
go install golang.org/x/tools/cmd/guru@latest
go install github.com/cweill/gotests/gotests@latest
go install github.com/fatih/gomodifytags@latest
#+end_src

* User Interface
** Name and email
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
(setq user-full-name "Atri Hegde"
      user-mail-address "me@hegdeatri.com")
#+end_src

** Line Numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src

** Scroll off
#+begin_src emacs-lisp
(setq scroll-margin 7)

(defun my-set-scroll-margin ()
  "Set scroll-margin based on the current major mode."
  (setq-local scroll-margin
              (cond ((derived-mode-p 'Info-mode) 0)
                    ((derived-mode-p 'term-mode) 0)
                    ((derived-mode-p 'eshell-mode) 0)
                    ((derived-mode-p 'shell-mode) 0)
                    ((derived-mode-p 'erc-mode) 0)
                    ((derived-mode-p 'vterm-mode) 0)
                    (t 7))))

(add-hook 'after-change-major-mode-hook #'my-set-scroll-margin)
#+end_src

** Font
#+begin_src emacs-lisp
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-symbol-font' -- for symbols
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face

(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 15 :weight 'regular)
      doom-variable-pitch-font (font-spec :family "Iosevka Aile" :size 12)
      doom-big-font (font-spec :family "JetBrainsMono Nerd Font" :size 24))

(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

** Theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-palenight)
#+end_src

** Doom modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :custom
  (doom-modeline-height 35)
  (doom-modeline-bar-width 1)
  (display-battery-mode t)
  (doom-modeline-time t)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-buffer-file-name-style 'truncate-upto-project)
  (doom-modeline-buffer-state-icon t)
  (doom-modeline-buffer-modification-icon t)
  (doom-modeline-persp-name nil)
  (doom-modeline-minor-modes nil)
  (doom-modeline-enable-word-count nil)
  (doom-modeline-buffer-encoding t)
  (doom-modeline-indent-info nil)
  (doom-modeline-checker-simple-format t)
  (doom-modeline-vcs-max-length 12)
  (doom-modeline-env-version t)
  (doom-modeline-irc-stylize 'identity)
  (doom-modeline-github-timer nil)
  (doom-modeline-gnus-timer nil)
  (setq display-time-mode t))
#+end_src

** Keybinds
#+begin_src emacs-lisp
(map! :leader
      (:prefix ("=" . "open config")
       :desc "Hyprland"      "h" #'(lambda () (interactive) (find-file "~/.config/hypr/hypr.org"))
       :desc "zshrc"         "z" #'(lambda () (interactive) (find-file "~/.zshrc"))
       :desc "eww"           "e" #'(lambda () (interactive) (find-file "~/.config/eww/eww.org"))
       :desc "nushell"       "n" #'(lambda () (interactive) (find-file "~/.config/nushell/nushell.org"))
       :desc "foot"          "f" #'(lambda () (interactive) (find-file "~/.config/foot/foot.org"))))
#+end_src

** Evil mode

#+begin_src emacs-lisp
(evil-global-set-key 'motion "j" 'evil-next-visual-line)
(evil-global-set-key 'motion "k" 'evil-previous-visual-line)
#+end_src

* Org mode
** General
#+begin_src emacs-lisp
(setq org-directory "~/org/")

(after! org
  (setq org-log-done 'time)
  (setq org-hide-emphasis-markers t)
  (setq org-startup-with-inline-images t)
  (setq
   org-ellipsis " ▼ "
   org-hide-emphasis-markers t
   ;; org-superstar-headline-bullets-list '("⁙" "⁘" "⁖" "❋" "✸" "✹")
   ;; org-superstar-headline-bullets-list '("⁖" "○" "◉" "●" "✸" "✿")
   org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
   )

  ;; after org continues
#+end_src

** Fonts in Org
#+begin_src emacs-lisp
(dolist (face '((org-level-1 . 1.2)
                (org-level-2 . 1.1)
                ))
  (set-face-attribute (car face) nil :font "Iosevka Aile" :weight 'medium :height (cdr face)))
(set-face-attribute 'org-document-title nil :font "Iosevka Aile" :weight 'bold :height 1.3)
(set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
(set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
(set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
(set-face-attribute 'line-number nil :inherit 'fixed-pitch)
(set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)
#+end_src

** Latex snippets

Render =\omega= as $\omega$.

#+begin_src emacs-lisp
(setq org-pretty-entities t)
#+end_src

General latex settings.

#+begin_src emacs-lisp
;; (plist-put org-format-latex-options :scale 0.5)
(setq org-highlight-latex-and-related '(latex))
(plist-put org-format-latex-options :background "Transparent")
#+end_src

** Org Roam
#+begin_src emacs-lisp
(setq org-roam-directory "~/org/roam")
(setq org-roam-capture-templates
  '(("d" "default" plain
     "%?"
     :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+startup: latexpreview\n")
     :unnarrowed t)
    ("m" "module" plain
     ;; (file "<path to template>")
     "\n* Module details\n\n- %^{Module code}\n- Semester: %^{Semester}\n\n* %?"
     :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+startup: latexpreview\n")
     :unnarrowed t)
    ("b" "book notes" plain
     "\n* Source\n\n- Author: %^{Author}\n- Title: ${title}\n- Year: %^{Year}\n\n%?"
     :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+startup: latexpreview\n")
     :unnarrowed t)
  )
)
(setq org-roam-dailies-capture-templates
  '(("d" "default" entry "* %<%H:%M>: %?"
     :ifnew (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))
  )
)
;; (org-roam-db-autosync-enable)
#+end_src

** Writeroom
#+begin_src emacs-lisp
;; writeroom mode bydefault for org roam buffers.
(add-hook 'org-mode-hook #'+zen/toggle t)
;; Keep fonts in writeroom mode.
(add-hook 'org-mode-hook #'buffer-face-mode)
;; after org ends
)
#+end_src

** Org roam ui
#+begin_src emacs-lisp :tangle packages.el
(unpin! org-roam)
(package! org-roam-ui)
#+end_src

#+begin_src emacs-lisp
(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+end_src

* General
#+begin_src emacs-lisp
(setq shell-file-name "/bin/bash")
(setq-default shell-file-name "/bin/bash")
(setenv "SHELL" shell-file-name)
#+end_src

* Keymaps
Unbind [[kbd:][SPC w c]] as it is easy to misclick
#+begin_src emacs-lisp
(map! :leader "b c" nil)
#+end_src

* LSP

* LLM

#+begin_src emacs-lisp :tangle packages.el
(package! ellama)
#+end_src

#+begin_src emacs-lisp
(use-package! ellama
  :init
  (setopt ellama-language "English")
  (require 'llm-ollama)
  (setopt ellama-provider
          ;; (llm-ollama-host "10.27.27.100")
          (make-llm-ollama
           :chat-model "zephyr" :embedding-model "zephyr")))
#+end_src
